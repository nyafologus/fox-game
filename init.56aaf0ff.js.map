{"version":3,"sources":["constants.js","ui.js","gameState.js","buttons.js","init.js"],"names":["ICONS","TICK_RATE","SCENES","RAIN_CHANCE","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","writeModal","text","innerHTML","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","timeToStartCelebrating","timeToEndCelebrating","poopTime","tick","console","log","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","startGame","scene","determineFoxState","clearTimes","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","buttonClick","target","contains","init","nextTimeToTick","Date","now","nextAnimationFrame","requestAnimationFrame"],"mappings":"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","file":"init.56aaf0ff.js","sourceRoot":"..\\src","sourcesContent":["export const ICONS = [ 'fish', 'poop', 'weather' ];\nexport const TICK_RATE = 3000;\nexport const SCENES = [ 'day', 'rain' ];\n// it will rain ~20% of the time\nexport const RAIN_CHANCE = 0.2;\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 3;\n\nexport const getNextHungerTime = (clock) => Math.floor(Math.random() * 3) + 5 + clock;\nexport const getNextDieTime = (clock) => Math.floor(Math.random() * 2) + 3 + clock;\nexport const getNextPoopTime = (clock) => Math.floor(Math.random() * 3) + 4 + clock;\n","// modding the scene in order to be able to re-use functionality, for example:\n// restarting the game after death / waking up after night\n\n// modFox(\"egg\");\n// modFox(\"idling\");\nexport const modFox = function modFox(state) {\n  document.querySelector('.fox').className = `fox fox-${state}`;\n};\n\n// modScene(\"day\");\nexport const modScene = function modScene(state) {\n  document.querySelector('.game').className = `game ${state}`;\n};\n\n// togglePoopBag(false);\nexport const togglePoopBag = function togglePoopBag(show) {\n  document.querySelector('.poop-bag').classList.toggle('hidden', !show);\n};\n\nexport const writeModal = function writeModal(text = '') {\n  document.querySelector('.modal').innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","/* eslint-disable no-console */\nimport {\n  SCENES,\n  RAIN_CHANCE,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextHungerTime,\n  getNextDieTime,\n  getNextPoopTime\n} from './constants';\nimport { modFox, modScene, togglePoopBag, writeModal } from './ui';\n\n// handles business logic (the clock, the state machine, all the actual logic behind the game)\nconst gameState = {\n  current: 'INIT',\n  // keep track of what clock tick we are currently on\n  clock: 1,\n  // -1 is not here to do any opereations on the clock value\n  // -1 serves as a sentinel to indicate the state of being \"not currently active\"\n  // it could be denoted with undefined instead of -1\n  // it is -1 so it is the same type as the clock value\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  dieTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  poopTime: -1,\n\n  tick() {\n    // increment current time\n    this.clock++;\n    console.log('clock', this.clock);\n\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startCelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n\n    return this.clock;\n  },\n\n  startGame() {\n    console.log('hatching');\n    // move finite state machine from INIT to HATCHING\n    this.current = 'HATCHING';\n    // define wake up time\n    this.wakeTime = this.clock + 3;\n    modFox('egg');\n    modScene('day');\n    writeModal();\n  },\n\n  wake() {\n    console.log('hatched');\n    this.current = 'IDLING';\n    this.wakeTime = -1;\n    modFox('idling');\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n\n  sleep() {\n    this.state = 'SLEEP';\n    modFox('sleep');\n    modScene('night');\n    this.clearTimes();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n\n  getHungry() {\n    this.current = 'HUNGRY';\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox('hungry');\n  },\n\n  die() {\n    console.log('die');\n    this.current = 'DEAD';\n    modScene('dead');\n    modFox('dead');\n    this.clearTimes();\n    writeModal('The fox died :( <br/> Press the middle button to start');\n  },\n\n  handleUserAction(icon) {\n    // can't do actions while in these states\n    if ([ 'SLEEP', 'FEEDING', 'CELEBRATING', 'HATCHING' ].includes(this.current)) {\n      // do nothing\n      return;\n    }\n\n    if (this.current === 'INIT' || this.current === 'DEAD') {\n      this.startGame();\n      return;\n    }\n\n    // execute the currently selected action\n    switch (icon) {\n      case 'weather':\n        this.changeWeather();\n        break;\n      case 'poop':\n        this.cleanUpPoop();\n        break;\n      case 'fish':\n        this.feed();\n        break;\n    }\n  },\n\n  changeWeather() {\n    console.log('changeWeather');\n    this.scene = (1 + this.scene) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n\n  poop() {\n    this.current = 'POOPING';\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox('pooping');\n  },\n\n  cleanUpPoop() {\n    console.log('cleanUpPoop');\n    if (this.current === 'POOPING') {\n      this.dieTime = -1;\n      togglePoopBag(true);\n      this.startCelebrating();\n      this.hungryTime = getNextHungerTime(this.clock);\n    }\n  },\n\n  feed() {\n    console.log('feed');\n    // can only feed when hungry\n    if (this.current !== 'HUNGRY') {\n      return;\n    }\n\n    this.current = 'FEEDING';\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modFox('eating');\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n\n  startCelebrating() {\n    this.current = 'CELEBRATING';\n    modFox('celebrate');\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating() {\n    this.timeToEndCelebrating = -1;\n    this.current = 'IDLING';\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === 'IDLING') {\n      if (SCENES[this.scene] === 'rain') {\n        modFox('rain');\n      } else {\n        modFox('idling');\n      }\n    }\n  },\n\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  }\n};\n\nexport default gameState;\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\n","import { ICONS } from './constants.js';\n\n//  handles UI logic (button clicks, hover events, DOM stuff)\nconst toggleHighlighted = (icon, show) =>\n  // make sure to include the . class selector at the beginning\n  document.querySelector(`.${ICONS[icon]}-icon`).classList.toggle('highlighted', show);\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n\n  // function buttonClick(event.target) { //alternative syntax\n  function buttonClick({ target }) {\n    // if (event.target.classList.contains('left-btn')) { //alternative syntax\n    if (target.classList.contains('left-btn')) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (target.classList.contains('right-btn')) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n\n  document.querySelector('.buttons').addEventListener('click', buttonClick);\n}\n","/* eslint-disable no-console */\nimport game, { handleUserAction } from './gameState';\nimport initButtons from './buttons';\n\n// 3000 ms\n// screaming case implies the value never changes\nimport { TICK_RATE } from './constants';\n\nasync function init() {\n  console.log('starting game');\n  initButtons(handleUserAction);\n\n  let nextTimeToTick = Date.now();\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextTimeToTick <= now) {\n      game.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  nextAnimationFrame();\n}\n\ninit();\n"]}